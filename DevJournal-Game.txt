ft_transcendence DevJournal: Developing the game

1. Identifying the adequate tools
The goal was to find a way to implement a Pong game that was supposed to run in a browser.
Pong is based on graphics that are simplistic, but graphics nonetheless.
Thus, the first big task was to find a good way to render smooth graphics and embed them in HTML.
After some research, I discovered the "Canvas" element. Excerpt from Wikipedia:
"The canvas element is part of HTML5 and allows for dynamic, scriptable rendering of 2D shapes and bitmap images.
It is a low level, procedural model that updates a bitmap. HTML5 Canvas also helps in making 2D games."
This sounded perfect for the scope of Transcendence.

2. Creating a locally-playable classic Pong
After discovering Canvas, I looked for a good tutorial and - conveniently enough -
I found an official Canvas tutorial for a classic brick-breaker-style game.
The tutorial only took a few hours to finish.
By the end of it, I had a fully functional game with a paddle, a ball and collisions.
This was as close as it could get to a Pong game, without actually being Pong.
The only changes I needed were adding one more controllable paddle, removing the bricks and adjusting the logic.
After another hour or two, I had a fully functional game of Pong that could be played by two players on the same keyboard.
The whole game was just one HTML file with around 200 lines of JavaScript code.

3. Getting creative
I had been having such a good time completing the game after starting from scratch in just 2 days,
that I wanted to experiment with the possibilities some more.
I wanted to add some special touches to the design of the game. So I tried adding some music.
That was easy. And fun! But I wanted something more challenging. And more abstract. And more confusing.
So I added the gnome.
Making a static image appear on top of a moving ball for short periods of time
at random intervals along with a sound effect was a very encouraging start.
But I needed even more.
I continued by messing with the game colors on collisions. This, again, was fun; however, not crazy enough.
I remembered about the many great YouTube poops featuring King Harkinian. So I gave him a role in the game as well.
The only major difference between King Harkinian and the gnome is that King Harkinian was going to be a video.
Speaking of videos, since I felt my game still needed more character, I remembered about the Mcroll'd YouTube video.
Not only did I add the Mcroll'd video, but I also queued the reverse version right after it and created an endless cycle.
The game still didn't have enough distractions in it, so I got the idea to add pop-ups, which would disrupt the game.
That one was also easy to implement. How about one more ball? Yes, that could be quite stressful...
It still felt like the game wouldn't end up being frustrating enough. How about some kind of enemy character?
That's when I remembered that, a few days before, my teammate showed me some examples of bad taxidermy on the Internet.
One of the more disturbing creations was a fox, sitting on a chair, similar to how a human would. I liked it.
For this one, I had to use all the knowledge I had already gathered developing all the previous custom features.
Of all the features, this one required the most logic and scripting and it still turned out very well.
After successfully implementing the fox, I went back to the gnome and gave it the ability
to swap the fox's position with the balls - at random, of course.
As one final addition - because I thought the game was still not deranging enough -
I added 150 different flashing messages that I came up with in an unsettlingly short time.
At this point, I was still unaware we were supposed to also implement an enhanced version of Pong anyway.

4. Migrating to TypeScript and React
Now that the game was fully functional - at least in a local multiplayer version - it was time to make it play online.
The process of adapting it to work as a component in a web page with TypeScript and React was unexpectedly tedious.
React has proven to be more restrictive, rather than facilitating, and forced me to rethink a lot of fundamentals.
I initially attempted to split the one game file into separate ones for balls, paddles, collisions etc.
Unfortunately, after a few weeks of failing at this, I had to stop and just leave everything in one file.
So, the game was now in the same state, except it was implemented in React with TypeScript.
The final step was to split it between the front-end and the back-end.

5. Splitting between front-end and back-end
